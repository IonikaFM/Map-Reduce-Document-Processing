import java.util.concurrent.Callable;
import java.util.concurrent.Future;

//Reduce type tasks
public class Reduce implements Callable<Output> {
    private final ReduceInput input;
    private MyDictionary finalDictionary;

    //Constructor
    public Reduce(ReduceInput input) {
        this.input = input;
        finalDictionary = new MyDictionary();
    }

    //Method that returns the fibonacci value at the @given_nr index
    public int FibonacciValue(int given_nr){
        int firstTerm = 0, secondTerm = 1, thirdTerm;

        while(given_nr > 0){
            thirdTerm = firstTerm + secondTerm;
            firstTerm = secondTerm;
            secondTerm = thirdTerm;
            given_nr--;
        }
        return secondTerm;
    }

    //Method that implements reducing part of the program
    public Output call() throws Exception {
        //Going through all the dictionaries generated by the map tasks
        for (Future<MyDictionary> dictionary : input.resultList ) {
            //Going through all elements of the maps from dictionaries and adding them to the @finalDictionary's map
            //(Go see "MyDictionary.addElementInHash" method)
            for(Integer key : dictionary.get().dimensions_nrOfApparitions.keySet()){
                finalDictionary.addElementInHash(key, dictionary.get().dimensions_nrOfApparitions.get(key));
            }

            //Going through all words from dictionaries and adding them to the @finalDictionary's list of words with
            //maximum length
            //(Go see "MyDictionary.addWordWithMaxLen" method)
            for(String word : dictionary.get().words_with_max_len){
                finalDictionary.addWordWithMaxLen(word);
            }
        }

        double rang = 0;
        int nrOfWords = 0;

        //Going through all the keys from the final map and calculating the sum and number of words contained by the
        //current file
        for(Integer key : finalDictionary.dimensions_nrOfApparitions.keySet()) {
            int obj = finalDictionary.dimensions_nrOfApparitions.get(key);

            rang += FibonacciValue(key) * obj;
            nrOfWords += obj;
        }

        //Calculating the final rang
        rang /= nrOfWords;

        //Returning the output of the current file
        return new Output(input.docName, rang, finalDictionary.words_with_max_len.get(0).length(),
                finalDictionary.words_with_max_len.size());
    }
}